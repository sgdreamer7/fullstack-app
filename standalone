#!/bin/sh
RUNNING_ENVIRONMENT="development"
RUNNING_ENVIRONMENT_CMD="dev"
case "$2" in
  "dev")
        RUNNING_ENVIRONMENT="development"
        RUNNING_ENVIRONMENT_CMD="dev"
      ;;
   "prod")
      RUNNING_ENVIRONMENT="production"
      RUNNING_ENVIRONMENT_CMD="prod"
     ;;
   "staging")
      RUNNING_ENVIRONMENT="staging"
      RUNNING_ENVIRONMENT_CMD="staging"
     ;;
    "test")
      RUNNING_ENVIRONMENT="test"
      RUNNING_ENVIRONMENT_CMD="test"
     ;;
esac
ENV_VARS="$(cat environments/${RUNNING_ENVIRONMENT}/.env | xargs)"
export $(echo ${ENV_VARS} | xargs)
case "$1" in
  "build")
      CURRENT_BUILD="standalone"
      if [ "$CURRENT_STATE" == "blue" ]; then CURRENT_BUILD="blue";
      elif [ "$CURRENT_STATE" == "green" ]; then CURRENT_BUILD="green"; fi
      echo "Building application '${COMPOSE_PROJECT_NAME}', '${RUNNING_ENVIRONMENT}' environment, '${CURRENT_BUILD}' version ..."
      ./scripts 'eval docker-compose build --quiet' ${RUNNING_ENVIRONMENT_CMD}
      echo "Finished.\n"
      ;;
  "start")
      CURRENT_BUILD="standalone"
      if [ "$CURRENT_STATE" == "blue" ]; then CURRENT_BUILD="blue";
      elif [ "$CURRENT_STATE" == "green" ]; then CURRENT_BUILD="green"; fi
      echo "Starting application '${COMPOSE_PROJECT_NAME}', '${RUNNING_ENVIRONMENT}' environment, '${CURRENT_BUILD}' version ..."
      ./scripts 'eval docker-compose up -d' ${RUNNING_ENVIRONMENT_CMD}
      echo "Finished.\n"
     ;;
  "stop")
      CURRENT_BUILD="standalone"
      if [ "$CURRENT_STATE" == "blue" ]; then CURRENT_BUILD="blue";
      elif [ "$CURRENT_STATE" == "green" ]; then CURRENT_BUILD="green"; fi
      echo "Stoping application '${COMPOSE_PROJECT_NAME}', '${RUNNING_ENVIRONMENT}' environment, '${CURRENT_BUILD}' version ..."
      ./scripts 'eval docker-compose down' ${RUNNING_ENVIRONMENT_CMD}
      echo "Finished.\n"
     ;;
  "deploy")
      DEPLOYMENT_VERSION_TAG=$3
      echo "Deploying application '${COMPOSE_PROJECT_NAME}', '${RUNNING_ENVIRONMENT}' environment, ${DEPLOYMENT_VERSION_TAG} version"
      cd "$(dirname "$0")"
      ./standalone stop $2
      git checkout tags/${DEPLOYMENT_VERSION_TAG}
      ./standalone build $2
      ./standalone start $2
     ;;
  "sh")
      ./scripts 'eval docker exec -it ${COMPOSE_PROJECT_NAME}-nginx-router sh' ${RUNNING_ENVIRONMENT_CMD}
     ;;
  "logs")
    case "${RUNNING_ENVIRONMENT_CMD}" in
      "router")
        ./scripts 'eval docker logs ${COMPOSE_PROJECT_NAME}-nginx-router' $3 $4 $5 $6 $7 $8 $9 
        ;;
      "frontend")
        ./scripts 'eval docker logs ${COMPOSE_PROJECT_NAME}-frontend' $3 $4 $5 $6 $7 $8 $9
        ;;
      "adminer")
        ./scripts 'eval docker logs ${COMPOSE_PROJECT_NAME}-adminer' $3 $4 $5 $6 $7 $8 $9
        ;;
      "mailhog")
        ./scripts 'eval docker logs ${COMPOSE_PROJECT_NAME}-mailhog' $3 $4 $5 $6 $7 $8 $9
        ;;
      "minio")
        ./scripts 'eval docker logs ${COMPOSE_PROJECT_NAME}-minio' $3 $4 $5 $6 $7 $8 $9
        ;;
      "minio-client")
        ./scripts 'eval docker logs ${COMPOSE_PROJECT_NAME}-minio-client' $3 $4 $5 $6 $7 $8 $9
        ;;
      *)
        echo ""
        echo "No options found for the logs command."
        echo ""
        echo "Please enter one of the following:"
        echo ""
        echo "    router          Logging for the nginx-router service"
        echo "    frontend        Logging for the frontend service"
        echo "    adminer         Logging for the adminer service"
        echo "    mailhog         Logging for the mailhog service"
        echo "    minio           Logging for the minio service"
        echo "    minio-client    Logging for the minio-client service"
        echo ""
        ;;
    esac
    ;;
  *)
    echo ""
    echo "usage: ./standalone COMMAND [OPTION] [ENVIRONMENT] [OPTIONS]"
    echo ""
    echo  "Standalone fullstack application CLI"
    echo ""
    echo "Commands:"
    echo "  build   Build docker images"
    echo "  start   Start application"
    echo "  stop    Stop application"
    echo "  sh      Run shell in nginx-router container"
    echo "  logs    Show logs output for the services"
    echo ""
    echo "Option: "
    echo "  for the logs command:"
    echo "    router          Logging for the nginx-router service"
    echo "    frontend        Logging for the frontend service"
    echo "    adminer         Logging for the adminer service"
    echo "    mailhog         Logging for the mailhog service"
    echo "    minio           Logging for the minio service"
    echo "    minio-client    Logging for the minio-client service"
    echo ""
    echo "Options: "
    echo "  for the logs command:"
    echo "    --follow        Follow log output"
    echo "    --tail string   Number of lines to show from the end of the logs (default "all")"
    echo ""
    echo "Environments: "
    echo "  dev         Development environment"
    echo "  prod        Production environment"
    echo "  staging     Staging environment"
    echo "  test        Testing environment"
    echo ""
    echo "If omitted, will be used development environment."
    echo ""
    echo "Examples:"
    echo ""
    echo "  ./standalone build"
    echo "  ./standalone start dev"
    echo "  ./standalone start prod"
    echo "  ./standalone logs dev router"
    echo "  ./standalone logs prod frontend --follow"
    echo ""
esac