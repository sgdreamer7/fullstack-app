version: "3.8"

services:
  nginx-router:
    networks:
      default:
        aliases:
          - "${COMPOSE_PROJECT_NAME}.local"
      blue-green:
        aliases:
          - "${COMPOSE_PROJECT_NAME}.${COMPOSE_PROJECT_NAME_PREFIX}"
    image: ${DOCKER_USERNAME}/${COMPOSE_PROJECT_NAME}-nginx-router:${NGINX_ROUTER_TAG}
    container_name: ${COMPOSE_PROJECT_NAME}-nginx-router
    build: { context: ./nginx-router }
    restart: always
    ports:
      [
        "${LOCALHOST_PREFIX}${NGINX_PORT}:${NGINX_PORT}",
        "${LOCALHOST_PREFIX}${NGINX_SSL_PORT}:${NGINX_SSL_PORT}",
      ]
    depends_on: ["adminer", "mailhog", "minio", "frontend", "backend"]
    environment:
      - NGINX_HOST=${NGINX_HOST}
      - NGINX_PORT=${NGINX_PORT}
      - NGINX_SSL_PORT=${NGINX_SSL_PORT}
      - FRONTEND_PORT=${FRONTEND_PORT}
    volumes:
      - ../../certificates/${NGINX_HOST}.server.key:/etc/nginx/ssl/${NGINX_HOST}/server.key
      - ../../certificates/${NGINX_HOST}.server.crt:/etc/nginx/ssl/${NGINX_HOST}/server.crt

  minio:
    image: minio/minio
    container_name: ${COMPOSE_PROJECT_NAME}-minio
    restart: always
    environment:
      - COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_API_SIGNATURE=${MINIO_API_SIGNATURE}
    volumes: ["minio:/data"]
    command: "server /data"

  minio-client:
    image: minio/mc
    container_name: ${COMPOSE_PROJECT_NAME}-minio-client
    environment:
      - COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_API_SIGNATURE=${MINIO_API_SIGNATURE}
    volumes: ["./minio.init:/minio.init"]
    entrypoint: sh
    depends_on: ["minio"]
    command: "/minio.init/init.sh"

  adminer:
    image: adminer
    container_name: ${COMPOSE_PROJECT_NAME}-adminer
    restart: always

  mailhog:
    image: mailhog/mailhog
    container_name: ${COMPOSE_PROJECT_NAME}-mailhog
    restart: always
    ports: ["127.0.0.1:${MAILHOG_PORT}:8025"]

  db:
    image: mysql:8.0.19
    container_name: ${COMPOSE_PROJECT_NAME}-db
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    ports: ["3306:3306"]
    volumes: ["../../data/${COMPOSE_PROJECT_NAME}/mysql:/var/lib/mysql"]
    environment:
      MYSQL_DATABASE: ${COMPOSE_PROJECT_NAME}
      MYSQL_USER: ${COMPOSE_PROJECT_NAME}
      MYSQL_PASSWORD: ${COMPOSE_PROJECT_NAME}
      MYSQL_ROOT_PASSWORD: ${COMPOSE_PROJECT_NAME}

  test-db:
    image: mysql:8.0.19
    container_name: ${COMPOSE_PROJECT_NAME}-test-db
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    ports: ["6603:3306"]
    volumes: ["../../data/${COMPOSE_PROJECT_NAME}/mysql-test:/var/lib/mysql"]
    environment:
      MYSQL_DATABASE: ${COMPOSE_PROJECT_NAME}-test
      MYSQL_USER: ${COMPOSE_PROJECT_NAME}
      MYSQL_PASSWORD: ${COMPOSE_PROJECT_NAME}
      MYSQL_ROOT_PASSWORD: ${COMPOSE_PROJECT_NAME}

  frontend:
    image: ${DOCKER_USERNAME}/${COMPOSE_PROJECT_NAME}-frontend:${FRONTEND_TAG}
    container_name: ${COMPOSE_PROJECT_NAME}-frontend
    build:
      context: "../../apps/frontend-${FRONTEND_TYPE}"
      dockerfile: Dockerfile
      args:
        PORT: ${FRONTEND_PORT}
        REACT_APP_CURRENT_STATE: ${CURRENT_STATE}
    restart: always
    env_file: "./env/frontend.env"
    environment:
      - PORT=${FRONTEND_PORT}
    volumes:
      - ../../apps/frontend-${FRONTEND_TYPE}:/usr/src/app

  backend:
    networks:
      default:
        aliases:
          - "${COMPOSE_PROJECT_NAME}.local"
      blue-green:
        aliases:
          - "${COMPOSE_PROJECT_NAME}.${COMPOSE_PROJECT_NAME_PREFIX}"
    image: ${DOCKER_USERNAME}/${COMPOSE_PROJECT_NAME}-backend:${BACKEND_TAG}
    container_name: ${COMPOSE_PROJECT_NAME}-backend
    build:
      context: ../../apps/backend-${BACKEND_TYPE}
      dockerfile: Dockerfile
    restart: always
    env_file: "./env/backend.env"
    environment:
      MODE: "application"
    ports: ["${LOCALHOST_PREFIX}5000:5000"]
    depends_on: ["db", "test-db", "mailhog"]
    volumes:
      - ../../apps/backend-${BACKEND_TYPE}:/usr/src/app

volumes:
  minio:

networks:
  default:
    external:
      name: standalone-${COMPOSE_PROJECT_NAME_PREFIX}${COMPOSE_PROJECT_NAME_WITHOUT_PREFIX}
    driver: bridge
  blue-green:
    external:
      name: blue-green-${COMPOSE_PROJECT_NAME_WITHOUT_PREFIX}
    driver: bridge
